@page "/admin/users"
@attribute [Authorize(Roles = "Admin")]
@inject UserManager<IdentityUser> UserManager

<h3>User Management</h3>

@if (users == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Email</th>
                <th>Roles</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Email</td>
                    <td>
                        <select @bind="selectedRoles[user.Id]" class="form-select">
                            @foreach (var role in allRoles)
                            {
                                <option value="@role">@role</option>
                            }
                        </select>
                    </td>
                    <td>
                        <button @onclick="() => SaveUser(user)" class="btn btn-primary">Save</button>
                        <button @onclick="() => DeleteUser(user)" class="btn btn-danger">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<IdentityUser> users = new();
    private List<string> allRoles = new() { "User", "Admin" };
    private Dictionary<string, string> selectedRoles = new();

    protected override async Task OnInitializedAsync()
    {
        // Load users and roles
        users = UserManager.Users.ToList();
        foreach (var user in users)
        {
            var roles = await UserManager.GetRolesAsync(user);
            selectedRoles[user.Id] = roles.FirstOrDefault() ?? "User";
        }
    }

    private async Task SaveUser(IdentityUser user)
    {
        var currentRoles = await UserManager.GetRolesAsync(user);
        await UserManager.RemoveFromRolesAsync(user, currentRoles);
        await UserManager.AddToRoleAsync(user, selectedRoles[user.Id]);
    }

    private async Task DeleteUser(IdentityUser user)
    {
        await UserManager.DeleteAsync(user);
        users.Remove(user);
    }
}
